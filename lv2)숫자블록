###효율성 실패 코드
def solution(begin, end):
    
    load = [i for i in range(begin,end+1)]  

    def prime(n):
        k = 0
        for i in range(1,n):
            if n % i == 0:
                k = i
        return k
    
    answer = [0] * len(load)
    for i in range(begin,end+1):
            answer[i] = prime(load[i])
    return answer
    
    #정답
    def solution(begin, end):
    answer = []
    for i in range(begin, end+1):
        k = int(i != 1)  # i가 1이면 0, 1이 아니면 1을 대입
        for j in range(2, int(i**0.5)+1): # i**0.5 == sqrt(i)로 하지 않고 i로 하여 2부터 i까지 다 더하면 시간초과가 난다. 굳이거기까지 갈 필요x
            if i%j == 0 and i//j <= 10000000:  
                k = i//j  # j가 2부터 커지기 때문에 처음 만나는 i//j가 약수 중 가장 큰 값
                break
        answer.append(k)
    
    return answer


#다른풀이
import math
def solution(begin, end):
    answer = []
    
    for i in range(begin, end + 1):
        if i == 1:
            answer.append(0)
            continue
        else:
            s = int(math.sqrt(i))  # i의 제곱근
            for j in range(2,s+1):  # 2~~i의 제곱근까지 나눗셈계산
                m = i // j  # 나눈 몫
                if m > 10 ** 7:  # 블록번호가 10**7초과면 건너뛰기
                    continue
                if i % j == 0:  # 블록번호가 10**7이하이며 나누어 떨어진다면
                    answer.append(m)  # 정답리스트에 추가
                    break
            else:
                answer.append(1)
    return answer
