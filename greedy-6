#방법 1

from operator import itemgetter


def solution(food_times, k):
    foods = []
    n = len(food_times)  # 음식의 갯수
    for i in range(n):
        foods.append((food_times[i], i+1))
    
    foods.sort()  # 0번째 인덱스(음식 먹는데 걸리는 시간)를 기준으로 오름차순 정렬
    
    time = 0
    for i, food in enumerate(foods):
        diff = food[0] - time  # 높이
        if diff != 0:
            spend = diff * n  #높이 * 남은음식 갯수 = 소비한 시간
            if spend <= k:
                k -= spend
                time = food[0]
            else:
                k %= n
                sublist = sorted(foods[i:], key = itemgetter(1))
                return sublist[k][1]
            
        n -= 1
    return -1
        
   
   #방법2
   
   import heapq


def solution(food_times, k):
    answer = -1
    h = []
    for i in range(len(food_times)):
        heapq.heappush(h, (food_times[i], i + 1))

    food_num = len(food_times)  # 남은 음식 개수
    previous = 0  # 이전에 제거한 음식의 food_time

    while h:
        # 먹는데 걸리는 시간: (남은 양) * (남은 음식 개수)
        t = (h[0][0] - previous) * food_num
        # 시간이 남을 경우 현재 음식 빼기
        if k >= t:
            k -= t
            previous, _ = heapq.heappop(h)
            food_num -= 1
        # 시간이 부족할 경우(음식을 다 못먹을 경우) 남은 음식 중에 먹어야 할 음식 찾기
        else:
            idx = k % food_num
            h.sort(key=lambda x: x[1])
            answer = h[idx][1]
            break

    return answer
